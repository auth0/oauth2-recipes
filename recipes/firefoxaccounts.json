{"name":"firefoxaccounts","strategy":"oauth2","options":{"authorizationURL":"https://oauth.accounts.firefox.com/v1/authorization??acr_values=AAL2","tokenURL":"https://oauth.accounts.firefox.com/v1/token","scope":"openid profile","scripts":{"fetchUserProfile":"// This is the Fetch User Profile Script for FxA\n// Note the `acr_values` parameter, which requires AAL2 authenticator assurance level\n// (https://pages.nist.gov/800-63-3/sp800-63b.html)\n// Authenticator Assurance Level 2: AAL2 provides high confidence that the claimant controls an authenticator(s) bound to the subscriberâ€™s account. Proof of possession and control of two different authentication factors is required through secure authentication protocol(s). Approved cryptographic techniques are required at AAL2 and above.\n// We'd also be fine with AAL3 of course, though FxA supports up to AAL2 at this time.\n\n// Well-known URLs:\n// Prod: https://accounts.firefox.com/.well-known/openid-configuration\n// Stage: https://accounts.stage.mozaws.net/.well-known/openid-configuration\n// Dev: https://oauth-latest.dev.lcip.org/.well-known/openid-configuration\n//\n// Example:\n// Authorization endpoint: https://oauth-latest.dev.lcip.org/v1/authorization?acr_values=AAL2\n// Token endpoint: https://oauth-latest.dev.lcip.org/v1/token\n// scopes: openid profile\n// Note that as per above, using the authorization parameter `acr_values=AAL2` will enforce authenticating accounts with 2FA only\n\nfunction(accessToken, ctx, cb) {\n  // Auth0 already verified the id_token and it's signature at this stage\n  // See docs at https://developer.mozilla.org/en-US/docs/Mozilla/Tech/Firefox_Accounts/Introduction\n  // See also https://github.com/mozilla/fxa-oauth-server/issues/519#issuecomment-367196241 for information on fields\n  // Note that we assert this email is verified by FxA, though we do not check `amr` contains `email`. This is because\n  // We currently assert `email_verified` to be true if it has ever been verified, not if it's \"just been verified\"\n  var id_token = JSON.parse(jwt.decode(ctx.id_token));\n\n  // Request additional profile info, such as picture, locale, etc.\n  request.get('https://latest.dev.lcip.org/profile/v1/profile',\n    {\n      'headers': {\n        'Authorization': 'Bearer ' + accessToken,\n        'User-Agent': 'MozillaIAM-Auth0'\n      }\n    },\n    function(e, r, b) {\n      if (e) return callback(e);\n      if (r.statusCode !== 200) {\n        return cb(new Error('Failed to fetch user profile. StatusCode:' + r.statusCode));\n      }\n\n      var p = JSON.parse(b);\n\n      if (id_token.sub != p.sub) {\n        return cb(new Error('sub does not match, this should not happen'));\n      }\n\n      return cb(null, {\n        user_id: id_token.sub,\n        picture: p.avatar,\n        preferredLanguage: p.locale,\n        email: p.email,\n        email_verified: true,\n        fxa_sub: id_token.sub,\n        amr: id_token.amr,\n        acr: id_token.acr,\n        fxa_twoFactorAuthentication: p.twoFactorAuthentication\n      });\n    }\n  );\n}\n"}}}