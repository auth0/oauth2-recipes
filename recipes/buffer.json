{"name":"buffer","strategy":"oauth2","options":{"authorizationURL":"https://bufferapp.com/oauth2/authorize","tokenURL":"https://api.bufferapp.com/1/oauth2/token.json","scope":"","scripts":{"fetchUserProfile":"function(accessToken, ctx, cb) {\n  var apiUrl = 'https://api.bufferapp.com/1';\n  var userUrl = apiUrl + '/user.json';\n  var profilesUrl = apiUrl + '/profiles.json';\n  var reqOpts = {\n    qs: {\n      access_token: accessToken\n    }\n  };\n\n  var serviceData = {};\n\n  request.get(userUrl, reqOpts, function(err, response, body) {\n    if (err) return cb(err);\n    if (response.statusCode != 200) return cb(new Error('StatusCode: ' + response.statusCode));\n    // we're good! get the profiles...\n\n    var user = JSON.parse(response.body)\n    var expires_in = JSON.parse(body).expires_in\n    serviceData = {\n      id: user.id,\n      name: user.name,\n      accessToken: accessToken,\n      expiresAt: new Date(new Date().getTime() + (expires_in * 1000)),\n      services: {}\n    };\n\n    request.get(profilesUrl, reqOpts, function(err, response) {\n      if (err) return cb(err);\n      if (response.statusCode != 200) return cb(new Error('StatusCode: ' + respone.statusCode));\n\n      var profileList = JSON.parse(response.body)\n      var whitelist = [\n        '_id',\n        'avatar',\n        'avatar_https',\n        'service_id',\n        'service_username',\n        'formatted_username',\n        'default'\n      ];\n      profileList.map(function(profile) {\n        if (!serviceData.services[profile.service]) {\n          serviceData.services[profile.service] = [];\n        }\n        var profileServiceData = {};\n        whitelist.map(function(key) {\n          profileServiceData[key] = profile[key];\n        });\n        serviceData.services[profile.service].push(profileServiceData);\n      });\n\n      cb(null, serviceData);\n    });\n  });\n}"}}}